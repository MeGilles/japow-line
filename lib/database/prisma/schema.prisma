// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// for instance : Go&Return, Round-trip, Traverse, Several days
model RouteType {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  name_jp String? @unique
  Route   Route[]
}

// for instance: Ex,Alpine, Forest-limit, Below Forest-limit , Area not covered by snow
model AltitudeZone {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  name_jp String? @unique

  Route Route[]
}

// used for start and end points
// for instance : Ex, Big Parking / Parking limited / Top of ski-area
model PointType {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  name_jp String? @unique

  start Route[] @relation("Start")
  end   Route[] @relation("End")
}

model BarChart {
  id    Int     @id @default(autoincrement())
  Route Route[]
}

model Area {
  id Int @id @default(autoincrement())

  name    String  @unique
  name_jp String? @unique

  mountain Mountain[]
}

model Mountain {
  id Int @id @default(autoincrement())

  name    String  @unique
  name_jp String? @unique

  area    Area? @relation(fields: [areaId], references: [id])
  areaId Int?

  routes Route[]
}

model Route {
  id Int @id @default(autoincrement())

  name    String @unique
  name_jp String @unique

  description    String?
  description_jp String?

  elevationDifference Int?
  maxAltitude         Int?
  minAltitude         Int?
  totalDistance       Int?
  elevationDistance   Int?
  decentDistance      Int?

  recomendedMonth Int[] //numbers between 1 and 12
  picturesPath    String[] //the paths to pictures  
  routePoints     String[] //list of location points as string //for instance  [Chambéry, St Pierre d'Albigny, Col du Frêne, Chambéry]

  mountain   Mountain? @relation(fields: [mountainId], references: [id])
  mountainId Int?

  routeType   RouteType? @relation(fields: [routeTypeId], references: [id])
  routeTypeId Int?

  altitudeZone   AltitudeZone? @relation(fields: [altitudeZoneId], references: [id])
  altitudeZoneId Int?

  startPointType   PointType? @relation("Start", fields: [startPointTypeId], references: [id])
  startPointTypeId Int?

  endPointType   PointType? @relation(name: "End", fields: [endPointTypeId], references: [id])
  endPointTypeId Int?

  mapUrl  String?

  barChart   BarChart? @relation(fields: [barChartId], references: [id])
  barChartId Int?
  
  Post       Post[]
}

//a post on a route page
model Post {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  content      String
  picturesPath String[]

  likeCount   Int @default(0)

  route   Route @relation(fields: [routeId], references: [id])
  routeId Int

  author   Account @relation(fields: [authorId], references: [id])
  authorId Int
}



//models bellow are used by next-auth

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
  Post Post[]
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String?
  email              String?   @unique
  hashedPassword     String?
  hashedPasswordSalt String?
  emailVerified      DateTime? @map(name: "email_verified")
  image              String?
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}
